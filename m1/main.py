import asyncio
import json
import os
import sys
from bots.grid_ws_bot import GridBot
from bots.momentum_ws_bot import MomentumBot
from telegram_runner import start_telegram
from utils.exchange import init_exchange

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ sys.path –æ–±–Ω–æ–≤–ª—ë–Ω
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def launch_bots(api_key, api_secret, config):
    tasks = []

    for symbol in config["PAIRS"]:
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –¥–ª—è {symbol}")
        try:
            if config.get("USE_GRID", True):
                grid_bot = GridBot(api_key, api_secret, symbol, **config["grid"])
                tasks.append(asyncio.create_task(grid_bot.start()))

            if config.get("USE_MOMENTUM", True):
                momentum_bot = MomentumBot(api_key, api_secret, symbol, **config["momentum"])
                tasks.append(asyncio.create_task(momentum_bot.start()))

        except Exception as e:
            print(f"[INIT ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤ –¥–ª—è {symbol}: {e}")

    return tasks

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –∏ Telegram...")

    try:
        with open("config.json") as f:
            config = json.load(f)
    except Exception as e:
        print(f"[CONFIG ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.json: {e}")
        return

    api_key = config.get("API_KEY")
    api_secret = config.get("API_SECRET")

    if not api_key or not api_secret:
        print("[ERROR] –£–∫–∞–∂–∏ API_KEY –∏ API_SECRET –≤ config.json")
        return

    bot_tasks = await launch_bots(api_key, api_secret, config)

    # Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    try:
        asyncio.create_task(start_telegram())
    except Exception as e:
        print(f"[TELEGRAM ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")

    await asyncio.gather(*bot_tasks)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
    except Exception as e:
        print(f"[FATAL ERROR] {e}")
