import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from utils.pnl_logger import read_latest_pnl
from utils.exchange_client import client
import asyncio

API_TOKEN = '7433663009:AAEEUjVHMDRLcn9a95YYCWVnmNOxed8YLl4'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start_bot(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ Telegram-–∫–æ–º–∞–Ω–¥—ã.")

@dp.message_handler(commands=['stop'])
async def stop_bot(message: types.Message):
    try:
        from websocket import momentum_ws_bot
        if hasattr(momentum_ws_bot, 'active_bot') and momentum_ws_bot.active_bot:
            momentum_ws_bot.active_bot.stop()
            await message.answer("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ Telegram-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        else:
            await message.answer("‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

@dp.message_handler(commands=['status_debug'])
async def status_debug_bot(message: types.Message):
    await message.answer("üìä –°—Ç–∞—Ç—É—Å: –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ú–æ–∂–Ω–æ –≤–Ω–µ–¥—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö, –ø–æ–∑–∏—Ü–∏—è—Ö –∏ PnL.")

@dp.message_handler(commands=['restart'])
async def restart_bot(message: types.Message):
    await message.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫... –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –ª–æ–≥–∏–∫–µ –±–æ—Ç–∞.")

@dp.message_handler(commands=['status'])
async def status_bot(message: types.Message):
    try:
        pnl = read_latest_pnl()
        await message.answer(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n<pre>{pnl}</pre>", parse_mode=ParseMode.HTML)
    except Exception:
        await message.answer("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n<pre>No trades yet</pre>", parse_mode=ParseMode.HTML)

    try:
        balance = await client.get_balance()
        usdt = balance.get("USDT", 0)
        await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt:.2f}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
