import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
import asyncio

from utils.pnl_logger import read_latest_pnl
from utils.exchange_client import client

API_TOKEN = '7433663009:AAEEUjVHMDRLcn9a95YYCWVnmNOxed8YLl4'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start_bot(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

@dp.message_handler(commands=['stop'])
async def stop_bot(message: types.Message):
    await message.answer("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ Telegram-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")

@dp.message_handler(commands=['status'])
async def status_bot(message: types.Message):
    pnl = read_latest_pnl()
    await message.answer(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n<pre>{pnl}</pre>", parse_mode=ParseMode.HTML)

    try:
        balance = await client.get_balance()
        usdt_balance = balance.get("USDT", 0.0)
        await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance:.2f}")
    except Exception as e:
        await message.answer(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {e}")

@dp.message_handler(commands=['restart'])
async def restart_bot(message: types.Message):
    await message.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π. –ü–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–æ–¥–µ.")

@dp.message_handler(commands=['status_debug'])
async def status_debug_bot(message: types.Message):
    await message.answer("üìä –°—Ç–∞—Ç—É—Å: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ú–æ–∂–Ω–æ –≤–Ω–µ–¥—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
