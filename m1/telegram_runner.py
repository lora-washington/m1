import asyncio
from aiogram import executor, types
from telegram_bot import dp, bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Dispatcher –∏ Bot
from bots.grid_ws_bot import GridBot
from bots.momentum_ws_bot import MomentumBot
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º API –∏ –∫–æ–Ω—Ñ–∏–≥
with open("config.json") as f:
    config = json.load(f)

API_KEY = config["API_KEY"]
API_SECRET = config["API_SECRET"]
PAIRS = config["PAIRS"]
GRID_CFG = config["grid"]
MOMENTUM_CFG = config["momentum"]

running_bots = []  # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã

@dp.message_handler(commands=['start'])
async def start_bots(message: types.Message):
    if running_bots:
        await message.answer("‚ö†Ô∏è –ë–æ—Ç—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã.")
        return

    await message.answer("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤...")

    for symbol in PAIRS:
        grid_bot = GridBot(API_KEY, API_SECRET, symbol, **GRID_CFG)
        momentum_bot = MomentumBot(API_KEY, API_SECRET, symbol, **MOMENTUM_CFG)
        running_bots.append(grid_bot)
        running_bots.append(momentum_bot)

        asyncio.create_task(grid_bot.start())
        asyncio.create_task(momentum_bot.start())

    await message.answer("‚úÖ –í—Å–µ –±–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã.")

@dp.message_handler(commands=['stop'])
async def stop_bots(message: types.Message):
    if not running_bots:
        await message.answer("‚õîÔ∏è –ë–æ—Ç—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        return

    for bot_instance in running_bots:
        bot_instance.stop()

    running_bots.clear()

    await message.answer("üõë –ë–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

@dp.message_handler(commands=['status'])
async def status(message: types.Message):
    from utils.pnl_logger import read_latest_pnl
    from utils.exchange_client import client

    pnl = read_latest_pnl()
    await message.answer(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n<pre>{pnl}</pre>", parse_mode="HTML")

    balance = await client.get_balance()
    await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {balance.get('USDT', 0)}")

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
def start_telegram():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    executor.start_polling(dp, skip_updates=True)
